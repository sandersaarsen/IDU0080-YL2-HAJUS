
/*
 * 
 */

package ee.ttu.idu0080.hinnakiri.service;

import javax.xml.namespace.QName;
import javax.xml.ws.*;
import java.net.MalformedURLException;
import java.net.URL;


/**
 * This class was generated by Apache CXF 2.2.6
 * Thu Mar 04 16:26:57 EET 2010
 * Generated source version: 2.2.6
 */


@WebServiceClient(name = "HinnakiriService",
        wsdlLocation = "http://localhost:8080/HinnakiriService?wsdl",
        targetNamespace = "http://www.ttu.ee/idu0080/hinnakiri/wsdl/1.0")
public class HinnakiriService_Service extends Service {

    public final static URL WSDL_LOCATION;
    public final static QName SERVICE = new QName("http://www.ttu.ee/idu0080/hinnakiri/wsdl/1.0", "HinnakiriService");
    public final static QName HinnakiriPort = new QName("http://www.ttu.ee/idu0080/hinnakiri/wsdl/1.0", "HinnakiriPort");

    static {
        URL url = null;
        try {
            url = new URL("http://localhost:8080/HinnakiriService?wsdl");
        } catch (MalformedURLException e) {
            System.err.println("Can not initialize the default wsdl from http://localhost:8080/HinnakiriService?wsdl");
            // e.printStackTrace();
        }
        WSDL_LOCATION = url;
    }

    public HinnakiriService_Service(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public HinnakiriService_Service(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public HinnakiriService_Service() {
        super(WSDL_LOCATION, SERVICE);
    }

    /**
     * @return returns HinnakiriService
     */
    @WebEndpoint(name = "HinnakiriPort")
    public HinnakiriService getHinnakiriPort() {
        return super.getPort(HinnakiriPort, HinnakiriService.class);
    }

    /**
     * @param features A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return returns HinnakiriService
     */
    @WebEndpoint(name = "HinnakiriPort")
    public HinnakiriService getHinnakiriPort(WebServiceFeature... features) {
        return super.getPort(HinnakiriPort, HinnakiriService.class, features);
    }

    public static HinnakiriService_Service createService(URL wsdlLocation) {
        for (int i = 1; i <= 10; i++) {
            try {
                return new HinnakiriService_Service(wsdlLocation);
            } catch (WebServiceException e) {
                System.err.println("Can't connect to server... retrying attempt " + i);
            }
        }
        throw new WebServiceException();
    }

}
